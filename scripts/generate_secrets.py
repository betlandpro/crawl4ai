#!/usr/bin/env python3
"""
Secret Generation Script for Crawl4AI Production Deployment
Generates secure keys, passwords, and API keys
"""

import secrets
import string
import json
import subprocess
import sys
from pathlib import Path


def generate_secure_token(length=32):
    """Generate a secure random token"""
    return secrets.token_urlsafe(length)


def generate_api_key(prefix="sk"):
    """Generate a secure API key with prefix"""
    key_part = ''.join(secrets.choice(string.ascii_letters + string.digits) for _ in range(32))
    return f"{prefix}-{key_part}"


def generate_password(length=16):
    """Generate a secure password"""
    alphabet = string.ascii_letters + string.digits + "!@#$%^&*"
    password = ''.join(secrets.choice(alphabet) for _ in range(length))
    return password


def generate_htpasswd(username, password):
    """Generate htpasswd format for basic auth"""
    try:
        # Try using htpasswd command
        result = subprocess.run(
            ['htpasswd', '-nbB', username, password],
            capture_output=True,
            text=True
        )
        if result.returncode == 0:
            return result.stdout.strip()
    except FileNotFoundError:
        pass
    
    # Fallback to Python bcrypt
    try:
        import bcrypt
        salt = bcrypt.gensalt()
        hashed = bcrypt.hashpw(password.encode('utf-8'), salt)
        return f"{username}:{hashed.decode('utf-8')}"
    except ImportError:
        print("Warning: bcrypt not installed. Install with: pip install bcrypt")
        print("Using placeholder hash - YOU MUST GENERATE A REAL HASH")
        return f"{username}:$2y$10$PLACEHOLDER_HASH"


def main():
    print("=" * 60)
    print("Crawl4AI Production Secret Generator")
    print("=" * 60)
    print()
    
    # Check if .env already exists
    env_path = Path(".env")
    if env_path.exists():
        response = input(".env file already exists. Overwrite? (y/N): ")
        if response.lower() != 'y':
            print("Aborted. No changes made.")
            return
    
    # Get domain
    domain = input("Enter your domain (e.g., crawl4ai.yourdomain.com): ").strip()
    if not domain:
        print("Domain is required!")
        return
    
    # Generate security keys
    jwt_secret = generate_secure_token(64)
    redis_password = generate_password(24)
    
    # Admin credentials
    admin_username = input("Enter admin username (default: admin): ").strip() or "admin"
    admin_password_input = input("Enter admin password (leave empty to generate): ").strip()
    admin_password = admin_password_input or generate_password(16)
    
    # Generate playground auth
    playground_auth = generate_htpasswd(admin_username, admin_password)
    
    # Generate API keys
    print("\n" + "=" * 40)
    print("API Key Generation")
    print("=" * 40)
    
    api_keys = {}
    num_keys = int(input("How many API keys to generate? (default: 3): ").strip() or "3")
    
    for i in range(num_keys):
        print(f"\nAPI Key {i+1}:")
        key_id = input(f"  Key ID (default: prod-{i+1:03d}): ").strip() or f"prod-{i+1:03d}"
        key_name = input(f"  Key Name (default: Production Key {i+1}): ").strip() or f"Production Key {i+1}"
        key_prefix = input(f"  Key Prefix (default: sk-prod): ").strip() or "sk-prod"
        rate_limit = input(f"  Rate Limit (default: 1000/minute): ").strip() or "1000/minute"
        scopes_input = input(f"  Scopes (comma-separated, default: crawl,screenshot,pdf,md): ").strip()
        scopes = [s.strip() for s in scopes_input.split(",")] if scopes_input else ["crawl", "screenshot", "pdf", "md"]
        
        api_key = generate_api_key(key_prefix)
        
        api_keys[key_id] = {
            "name": key_name,
            "key": api_key,
            "rate_limit": rate_limit,
            "scopes": scopes,
            "enabled": True
        }
        
        print(f"  Generated: {api_key}")
    
    # Resource limits
    print("\n" + "=" * 40)
    print("Resource Configuration")
    print("=" * 40)
    
    memory_limit = input("Memory limit (default: 8G): ").strip() or "8G"
    cpu_limit = input("CPU limit (default: 4): ").strip() or "4"
    max_concurrent = input("Max concurrent crawls (default: 10): ").strip() or "10"
    
    # Write .env file
    env_content = f"""# Generated by generate_secrets.py
# Domain Configuration
DOMAIN={domain}

# Security Keys
JWT_SECRET_KEY={jwt_secret}
REDIS_PASSWORD={redis_password}

# Admin credentials
ADMIN_USERNAME={admin_username}
ADMIN_PASSWORD={admin_password}

# Playground Basic Auth
PLAYGROUND_AUTH={playground_auth}

# API Keys Configuration
API_KEYS_CONFIG='{json.dumps(api_keys, indent=2)}'

# Resource Limits
MEMORY_LIMIT={memory_limit}
CPU_LIMIT={cpu_limit}
MAX_CONCURRENT_CRAWLS={max_concurrent}

# Logging
LOG_LEVEL=INFO
"""
    
    with open(".env", "w") as f:
        f.write(env_content)
    
    print("\n" + "=" * 60)
    print("‚úÖ .env file generated successfully!")
    print("=" * 60)
    
    # Save API keys to separate file for reference
    api_keys_file = Path("api_keys.json")
    with open(api_keys_file, "w") as f:
        json.dump({
            "domain": domain,
            "admin": {
                "username": admin_username,
                "password": admin_password
            },
            "api_keys": api_keys
        }, f, indent=2)
    
    print(f"\nüìù API keys and credentials saved to: {api_keys_file}")
    print("‚ö†Ô∏è  Keep this file secure and never commit it to version control!")
    
    # Create .gitignore if it doesn't exist
    gitignore = Path(".gitignore")
    if not gitignore.exists():
        with open(gitignore, "w") as f:
            f.write(""".env
.llm.env
api_keys.json
*.log
*.pyc
__pycache__/
.DS_Store
""")
        print("\n‚úÖ .gitignore created")
    
    # Instructions
    print("\n" + "=" * 60)
    print("Next Steps:")
    print("=" * 60)
    print("1. Copy .llm.env.example to .llm.env and add your LLM API keys")
    print("2. Review the generated .env file")
    print("3. Deploy to Dokploy using docker-compose")
    print("4. Test your API keys and endpoints")
    print("\n‚ö†Ô∏è  IMPORTANT: Keep your .env and api_keys.json files secure!")


if __name__ == "__main__":
    main()